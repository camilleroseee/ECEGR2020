#include <stdio.h>
#include <stdlib.h>

// Lab 4 Part C -- Implementing a Stack using Linked List 

// Data structure to represent a stack
typedef struct Stack{
	float data;
    struct Stack* next; // added a next ptr to implememt stack using LL 
} Stack;

// initialItem is something that will be referenced throughout the program 
Stack* initialItem = NULL;

// utility function to create a new stack 
Stack* createStack(float in){
	Stack* newMember = (Stack*) malloc(sizeof(Stack));
	
	if(newMember != NULL){
		newMember->data = in;
		newMember->next = NULL;
	}
	
	return newMember;
}
 
// Utility function to return the size of the stack
int size(){
  Stack* node = initialItem;
	int counter = 0;
	while(node != NULL){
		counter++;
		node = node->next;
	}
	return counter;
}
 
// Utility function to check if the stack is empty or not
int isEmpty(){
    return initialItem == NULL;
}
 
// Utility function to check if the stack is full or not
int isFull(){
    return (malloc(sizeof(Stack)) == NULL);
}
 
// Utility function to add an element `x` to the stack
int push(float x){
    // check if the stack is already full. Then inserting an element would
    // lead to stack overflow
    if (isFull()){
        printf("Stack Full!\n");
        return -1;
    }
	
	Stack* newItem = createStack(x);
 
  printf("Inserting %f\n", x);
 
    // add an element and increment the top's index
	if(initialItem == NULL){
		initialItem = newItem;
		return 0;
	}
  
	newItem->next = initialItem;
	initialItem = newItem;
  return 0;
}
 
// Utility function to pop a top element from the stack
int pop(){
    // check for stack underflow
    if (isEmpty()){
        printf("Stack Empty!\n");
        return -1;
    }
 
    // remove element decrement stack size by 1
	printf("Removing %f\n", initialItem->data);
  Stack* tempVal = initialItem;
	initialItem = initialItem->next;
	free(tempVal);
    
  return 0;
}
 
// Utility function to peek at top element from the stack
int peek(float* x){
    // check for stack underflow
    if (isEmpty())
    {
        printf("Stack Empty!\n");
        return -1;
    }
 
    // return top of stack value
    *x = initialItem->data;
    return 0;
}
 
int main(){
    float value;
 
    push(1.0);
    push(2.0);
    push(3.0);
 
    printf("The stack size is %d\n", size());

    peek(&value);
    printf("Top val on stack is %f\n", value);

    pop();
    pop();
    pop();
 
    if (isEmpty()){
        printf("The stack is empty");
    }
    else{
        printf("The stack is not empty");
    }
 
    return 0;
}
