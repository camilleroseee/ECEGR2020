#include <iostream>
#include <cstring>
#include <fstream>

using namespace std;

enum Department {Philosophy, Theology, Math, Biology, Chemistry, Engineering, Unknown};
// Student class from Lab #5
class Student{
private:
	int  ID;
    char* firstName; // first and last names allocated on the heap 
    char* lastName;
    float GPA;
	Student* next;

// public operator to assign student characteristics 
public:
	Student();
	Student(int id_input, char *first_input, char *last_input, float gpa_input);
	Student(Student &init);
	~Student();
	Student& operator=(Student const &s){
		this->ID = s.ID;
		this->firstName = NULL; // null checks for firstName and lastName 
		this->lastName = NULL;
		setFirstName(s.firstName);
		setLastName(s.lastName);
		this->GPA = s.GPA;
        //printf("Student Assignment Operator completed. \n");
		return *this;
	}
	
	// Get methods for Student class 
	int getID(){
		return ID;
	}
	float getGPA(){
		return GPA;
	}
	char* getFirstName(){
		return firstName;
	}
	char* getLastName(){
		return lastName;
	}
	Student* getNext(){
		return next;
	}

	// Set methods for Student class 
	void setID(int id_input){
		ID = id_input;
	}
	void setGPA(float gpa_input){
		GPA = gpa_input;
	}
	void setFirstName(char *first_input){
		if(firstName == NULL){
			firstName = (char*) malloc(strlen(first_input)+1);
			strcpy(firstName, first_input);
			return;
		}
		else{
			free(firstName);
			firstName = (char*) malloc(strlen(first_input)+1);
			strcpy(firstName, first_input);
			return;
		}
	}
	void setLastName(char *last_input){
		if(lastName == NULL){
			lastName = (char*) malloc(strlen(last_input)+1);
			strcpy(lastName, last_input);
			return;
		}
		else{
			free(lastName);
			lastName = (char*) malloc(strlen(last_input)+1);
			strcpy(lastName, last_input);
			return;
		}
	}
	void setNext(Student* next_input){
		next = next_input;
	}
};

Student* firstStudent = NULL;

Student :: Student(){
	this->ID = 0000;
	this->firstName = NULL;
	this->lastName = NULL;
	this->GPA = 0.0;
	this->next = NULL;
	//printf("Student Default Constructor completed.\n");
}

Student :: Student(int id_input, char* first_input, char* last_input, float gpa_input){
	this->ID = id_input;
	this->firstName = (char*) malloc(strlen(first_input)+1);
	strcpy(this->firstName, first_input);
	this->lastName = (char*) malloc(strlen(last_input)+1);
	strcpy(this->lastName, last_input);
	this->GPA = gpa_input;
	this->next = NULL;
	//printf("Student Constructor completed for %s %s.\n", firstName, lastName);
}

Student :: Student(Student &init){
	ID = init.ID;
	GPA = init.GPA;
	firstName = NULL;
	lastName = NULL;
	if(init.firstName){
		setFirstName(init.firstName);
	}
	if(init.lastName){
		setLastName(init.lastName);
	}
	next = init.next;
	//printf("Student Copy Constructor completed.\n");
}

// student destructor from Lab 5 
Student :: ~Student(){
	//printf("Student Destructor completed for %s %s.\n", firstName, lastName);
	if(firstName){
		free(firstName);
	}
	if(lastName){
		free(lastName);
	}
}

// calling the functions from Lab #4 
void insertNode(Student* newStud);
void deleteStudent(Student* newStud);
void readStudentRecords(void);
void printList(void);
void saveList(void);
void removeStud(int id_input);
void updateStud(int id_input);
void showMenu(void); // Displays the default menu.
void showUpdateMenu(char* first, char* last); // Displays the menu for the specific student to have their attributes updated.

// testing my functions in main 
int main(){
	int user_in = 0;
	readStudentRec();
	do {
		int id_input;
		string temp;
		char* first_input;
		char* last_input;
		float gpa_input = 0.0;
		int userID_in; 
		Student* idChecker = initialStud; 
		
		menuDisplay(); 
		printf("\nWhat would you like to do? "); 
		cin >> user_in; 
		
		switch(user_in) 
		{
			case 1 : // listing all students 
			{
				readList(); 
				break; 
			}
				
			case 2 : // adding a student 
			{
				printf("\nEnter the ID of the student: "); 
				cin >> id_input; 
				while(idChecker != NULL){
					if(id_input == idChecker->getID()){
						printf("\nEntered ID is already used by an existing student."); 
						idChecker = firstStudent; 
						printf("\nEnter the ID of the student: "); 
						cin >> id_input; 
					}
					idChecker = idChecker->getNext(); 
				}
				
				printf("\nEnter the first name of the student: "); 
				cin >> temp; 
				first_input = (char*) malloc(sizeof(strlen((temp.c_str())+1)));
				strcpy(first_input, temp.c_str());
				
				printf("\nEnter the last name of the student: "); 
				cin >> temp; 
				last_input = (char*) malloc(sizeof(strlen((temp.c_str())+1)));
				strcpy(last_input, temp.c_str());
				
				printf("\nEnter the GPA of the student: ");
				cin >> gpa_input; 
				while((gpa_input > 4.0) || (gpa_input < 1.0)) {
					printf("\nPlease enter a GPA in the between 4.0 and 1.0."); 
					printf("\nEnter the GPA of the student: "); 
					cin >> gpa_input; 
				}
				
				Student* anotherPtr = new Student(id_input, first_input, last_input, gpa_input); 
				insertStudNode(anotherPtr); 
				free(first_input);
				free(last_input);
				break; 
			}
				
				
			case 3 :{ // removing a student 
				printf("\nEnter the ID of the student you want to delete: "); 
				scanf("%d", &userID_in); 
				removeStudent(userID_in);
				break; 
			}
				
				
			case 4 :{ // updating a student 
				
			}
				printf("\nEnter the ID of the student you wish to update: "); 
				cin >> userID_in; 
				updateStudent(userID_in); 
				break; 
			
			case 5 :{ // quitting the program 
				
			}
				printf("\nExiting Student Program..."); 
				break; // Leave the switch-case.
			
			default :
				printf("\nInvalid input\n"); 
		}
	}while(user_in != 5); 
	saveList();
	
	return 0;
}

void insertNode(Student* newStud){
	if(initialStud == NULL){
		initialStud = newStud;
		return;
	}
	else if(initialStud->getNext() == NULL){
		if(initialStud->getGPA() >= newStud->getGPA()){
			initialStud->setNext(newStud);
			return;
		}
		else{
			Student* temp = initialStud;
			initialStud = newStud;
			initialStud->setNext(temp);
			return;
		}
	}
	
	Student* node = initialStud;
	
	while(node->getNext() != NULL){
		Student* nextNode = node->getNext();
		
		if((node->getGPA() > newStud->getGPA()) && (newStud->getGPA() >= nextNode->getGPA())){
			newStud->setNext(node->getNext());
			node->setNext(newStud);
			return;
		}
		else if(node->getGPA() <= newStud->getGPA()){
			newStud->setNext(node);
			firstStudent = newStud;
			return;
		}
		node = node->getNext();
	}
	node->setNext(newStud);
	newStud->setNext(NULL);
	return;
}

void deleteStudentNode(Student* newStud){
	Student* currentStud = initialStud;
	Student* previousStud = NULL;
	
	if(initialStud == newStud){
		initialStud = initialStud->getNext();
		delete newStud;
		return;
	}
	
	while(currentStud != NULL && currentStud != newStud){ 
		previousStud = currentStud; 
		currentStud = currentStud->getNext(); 
	}
	
	if(currentStud != NULL){
		previousStud->setNext(currentStud->getNext());
	}
	
	delete newStud;
}

// this reads the student rec file and writes it into a linked list 
void readStudentRec(){ 
	ifstream readRecords; // using ifstream to accomodate for strings of various lengths 
	int totalStudents = 0;
	readRecords.open("StudentRecords.txt");
	if(!readRecords.is_open()){
		cerr << "Wasn't able to open the file: StudentRecords.txt" << endl; // error message when file isn't found
	}
	else{
		string temp = "";
		readRecords >> temp;
		readRecords >> temp;
		readRecords >> temp;
		readRecords >> totalStudents;
		cout << "\nNumber of Students: " << totalStudents << "\n";
		for(int i = 0; i < totalStudents; i++){
			int read_id = 0;
			char* read_firstName = NULL;
			char* read_lastName = NULL;
			float read_gpa = 0.0;
			readRecords >> temp;
			readRecords >> temp;
			readRecords >> read_id;
			readRecords >> temp;
			readRecords >> temp;
			readRecords >> temp;
			readRecords >> temp;
			
			read_firstName = (char*) malloc(strlen((temp.c_str())+1));
			strcpy(read_firstName, temp.c_str());
			
			readRecords >> temp;
			readRecords >> temp;
			readRecords >> temp;
			readRecords >> temp;
			read_lastName = (char*) malloc(strlen((temp.c_str())+1));
			strcpy(read_lastName, temp.c_str());
			
			readRecords >> temp;
			readRecords >> temp;
			readRecords >> read_gpa;
			
			Student* newStudent = new Student(read_id, read_firstName, read_lastName, read_gpa);
			insertNode(newStudent);
			
			free(read_firstName); // frees the memory allocated to first and last name
			free(read_lastName);
		}
		readRecords.close();
		printf("StudentRecords.txt was successfully processed. \n"); 
	}
}

void printList(){ // Iterates through the linked list and prints out all the students in the linked list.
	Student* node = firstStudent; 
	printf("\n---STUDENT LINKED LIST---"); 
	while(node != NULL){ 
		printf("\n\nStudent ID: %d", node->getID());
		printf("\nStudent First Name: %s", node->getFirstName());
		printf("\nStudent Last Name: %s", node->getLastName());
		printf("\nStudent GPA: %f", node->getGPA());
		node = node->getNext(); 
	}
	printf("\n\n----\n"); 
}

void saveList(){ 
	ofstream openRecords; //using ofstream to output info into file 
	openRecords.open("StudentRecords.txt");
	Student* node = initialStud; 
	int studentCounter = 0; 
	while(node != NULL){ 
		studentCounter++; 
		node = node->getNext(); 
	}
	if (!openRecords.is_open()){
		cout << "Unable to write to this file\n";
	}
	else{
		openRecords << "Number of students: " << studentCounter; 
		// sets linked list to the initial node 
        node = firstStudent; 
		while(node != NULL){ 
			openRecords << "\n\nStudent ID: " << node->getID();
			openRecords << "\nStudent First Name: " << node->getFirstName();
			openRecords << "\nStudent Last Name: " << node->getLastName();
			openRecords << "\nStudent GPA: " << node->getGPA();
			node = node->getNext(); // moves from one student to the next 
		}
		openRecords.close(); // Closes the file 
	}
}

void removeStud(int id_input){ 
	Student* node = firstStudent; 
	int checker = 0; 
	while(node != NULL){ 
		if(id_input == node->getID()){ 
			char* first;
			first = (char*) malloc(strlen(node->getFirstName()+1));
			char* last;
			last = (char*) malloc(strlen(node->getLastName()+1));
			strcpy(first, node->getFirstName());
			strcpy(last, node->getLastName());
			deleteStudentNode(node);
			checker = 1; 
			printf("\n%s %s was successfully deleted.", first, last); 
			free(first);
			free(last);
			return; 
		}
		node = node->getNext(); 
	}
    // if statement to check for when ID is unable to be located 
	if(checker == 0){ 
		printf("\nThat is an invalid student ID."); 
		return; 
	}
	return; 
}

// updates a specific attribute of the student based on their ID 
void updateStud(int id_in){ 
	Student* node = initialStud; 
	Student* prevNode = node; 
	int check = 0; 
	int user_input = 0; 
	while(node != NULL){ 
		if(id_in == node->getID()){ 
			do{ 
				updateStudentMenu(node->getFirstName(), node->getLastName()); 
				cin >> user_input; 

				int new_id, old_id = 0;
				char* new_firstName = NULL;
				char* old_firstName = NULL;
				char* new_lastName = NULL;
				char* old_lastName = NULL;
				string temp = "";
				float new_gpa, old_gpa = 0.0;
				Student* idCheck = initialStud;
				
				switch(user_input){ 
                    // updating ID 
					case 1 : // 
						cout << "\nEnter the new ID: "; 
						cin >> new_id; 
						while(idCheck != NULL){ 
							if(new_id == idCheck->getID()){ 
								printf("\nEntered ID is currently used by and existing student."); 
								idCheck = firstStudent; 
								printf("\nEnter the ID of the student: "); 
								scanf("%d", &new_id); 
							}
							idCheck = idCheck->getNext(); 
						}
						old_id = node->getID(); 
						node->setID(new_id); 
						printf("\n%d was sucessfully updated to %d", old_id, new_id); 
						break; 
					// updating first name 
                    case 2 : 
						printf("\nEnter the new first name: "); 
						cin >> temp; 
						new_firstName  = (char*) malloc(strlen(temp.c_str()+1));
						strcpy(new_firstName , temp.c_str());
						old_firstName = (char*) malloc(strlen(node->getFirstName()+1));
						strcpy(old_firstName, node->getFirstName()); 
						node->setFirstName(new_firstName); 
						printf("\n%s was sucessfully updated to %s", old_firstName, new_firstName); 
						free(new_firstName);
						free(old_firstName);
						break; 
                    // updating last name 
					case 3 : 
						printf("\nEnter the new last name: "); 
						cin >> temp; 
						new_lastName = (char*) malloc(strlen(temp.c_str()+1));
						strcpy(new_lastName, temp.c_str());
						old_lastName = (char*) malloc(strlen(node->getLastName()+1));
						strcpy(old_lastName, node->getLastName()); 
						node->setLastName(new_lastName); 
						printf("\n%s was sucessfully updated to %s", old_lastName, new_lastName); 
						break; 
                    // updating GPA 
					case 4 : 
						printf("\nEnter the new GPA: "); 
						scanf("%f", &new_gpa); 
						while((new_gpa > 4.0) || (new_gpa < 1.0)){ 
							printf("\nPlease enter a GPA in the range of 4.0 and 1.0."); 
							printf("\nEnter the GPA of the student: "); 
							scanf("%f", &new_gpa); 
						}
						old_gpa = node->getGPA(); 
						node->setGPA(new_gpa); 
						if(prevNode == node){ 
							node->setNext(NULL); 
							insertStudentNode(node); 
						}
						else{ 
							prevNode->setNext(node->getNext()); 
							insertStudentNode(node); 
						}
						printf("\n%f was sucessfully updated to %f", old_gpa, new_gpa); 
						break; 
					// quitting the program 
					case 5 : 
						break; 
					default : 
						printf("\nInvalid input\n");
				}
			} while(user_input != 5); 
			return; 
		}
		prevNode = node; 
		node = node->getNext(); 
	}
	if(check == 0){ 
		printf("\nThere is no student associated with the given ID."); 
		return; // Leave the function.
	}
}

// displays standard menu 
void showMenu(){ 
	printf("\n---STUDENT MENU---");
	
	printf("\n\n(1) List all entered students");
	printf("\n(2) Add a Student");
	printf("\n(3) Remove a Student");
	printf("\n(4) Update a Student");
	
	printf("\n\n(5) Exit the program");
	printf("\n\n----");
	printf("\n\n");
}

// displays update menu 
void showUpdateMenu(char* first, char* last){ 
	printf("\n---UPDATE STUDENT MENU---");
	printf("\nWhat would you like to update about %s %s?", first, last);
	printf("\n\n(1) Student ID");
	printf("\n(2) Student First Name");
	printf("\n(3) Student Last Name");
	printf("\n(4) Student GPA");
	
	printf("\n\n(5) Exit the program");
	printf("\n\n----");
	printf("\n\n");
}
